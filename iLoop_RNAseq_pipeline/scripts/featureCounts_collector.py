#!/usr/bin/env python

import pandas as pd
import json
import os
import argparse
import logging

logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser(description='This script will collect the counts generated by featureCounts. Outputs 2 files: one for read counts and one for stats.')

parser.add_argument('-p', '--project-path', help='Path to project folder')
parser.add_argument('-g', '--groups-json', help='json file for experiment setup with full path.')
parser.add_argument('-o', '--output', help='Path and prefix of output file. e.g.: ./featureCounts/collected_counts')
args = parser.parse_args()

groups = json.load(open(args.groups_json, 'r'))

df = pd.concat([pd.read_table(os.path.join(os.path.abspath(args.project_path),
                                           sample,
                                           'featureCounts_{}.out'.format(sample)),
                              header=1,
                              skiprows=0,
                              index_col=0,
                              usecols=[0,6],
                              names=['Feature', sample]) for group in groups.values() for sample in group.keys()], axis=1)
df_stats = pd.concat([pd.read_table(os.path.join(os.path.abspath(args.project_path),
                                                 sample,
                                                 'featureCounts_{}.out.summary'.format(sample)),
                                    header=1,
                                    index_col=0,
                                    names=['Status', sample]) for group in groups.values() for sample in group.keys()], axis=1)
df.to_csv('{}.csv'.format(args.output))
df_stats.to_csv('{}_summary.csv'.format(args.output))
